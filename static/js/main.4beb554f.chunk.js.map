{"version":3,"sources":["API.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","utils.ts","images/img1.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4beb554f.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\r\n\r\nexport interface IQuestion {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport interface IQuestionState extends IQuestion {\r\n    answers: string[];\r\n}\r\n\r\nexport enum Difficulty {\r\n    EASY = 'easy',\r\n    MEDIUM = 'medium',\r\n    HARD = 'hard'\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n    // 1st await = for data\r\n    // 2nd await = convert to json\r\n    const data = await (await fetch(endpoint)).json();\r\n    // console.log(data);\r\n    return data.results.map((question: IQuestion) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArray([...question.incorrect_answers, question.correct_answer]),\r\n\r\n        }\r\n    ))\r\n}","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div `\r\n    max-width: 1100px;\r\n    background: #ebfeff;\r\n    border-radius: 10px;\r\n    border: 2px solid #0085a3;\r\n    padding: 20px;\r\n    box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\r\n    text-align: center;\r\n\r\n    p {\r\n        font-size: 1rem;\r\n    }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n}\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n    transition: all 0.3s ease;\r\n\r\n    :hover{\r\n        opacity: 0.8;\r\n    }\r\n\r\n    button {\r\n        cursor: pointer;\r\n        user-select: none;\r\n        font-size: 0.8rem;\r\n        width: 100%;\r\n        height: 40px;\r\n        margin: 5px 0;\r\n        background: ${({ correct, userClicked}) => \r\n            correct \r\n             ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n             : !correct && userClicked \r\n             ? 'linear-gradient(90deg, #ff5656, #c16868)'\r\n             : 'linear-gradient(90deg, #56ccff, #6eafb4)'\r\n        };\r\n        border: 3px solid white;\r\n        box-shadow: 1px 2px 0px rgba(0,0,0, 0.1);\r\n        border-radius: 10px;\r\n        color: #fff;\r\n        text-shadow: 0px 1px 0px rgba(0,0,0,0.25);\r\n    }\r\n`;","import React, { FC, MouseEvent } from 'react';\r\nimport { IAnswerObject } from '../App';\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\ninterface IProps {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: IAnswerObject | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: FC<IProps> = ({question, answers, callback, userAnswer, questionNr, totalQuestions}) => {\r\n    return (\r\n        <Wrapper>\r\n            <p className='number'>Question: { questionNr } / { totalQuestions } </p>\r\n            <p dangerouslySetInnerHTML={{__html: question}} />\r\n            <div>\r\n                {answers.map((answer) => (\r\n                    <ButtonWrapper key={answer} correct={userAnswer?.correctAnswer === answer} userClicked={userAnswer?.answer === answer}>\r\n                        <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\r\n                            <span dangerouslySetInnerHTML={{__html: answer}} />\r\n                        </button>\r\n                    </ButtonWrapper>\r\n                ))}\r\n            </div>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default QuestionCard;","export const shuffleArray = (array: any[]) => \r\n    [...array].sort(() => Math.random() - 0.5);\r\n\r\n","export default __webpack_public_path__ + \"static/media/img1.d3570a08.jpg\";","import styled, { createGlobalStyle} from 'styled-components';\r\nimport BGImage from './images/img1.jpg';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html{\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        background-image: url(${BGImage});\r\n        background-size: cover;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n    \r\n    *{\r\n        box-sizing: border-box;\r\n        font-family:  'Catamaran', sans-serif;\r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div `\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    > p {\r\n        color: #fff;\r\n    }\r\n\r\n    .score {\r\n        color: #fff;\r\n        font-size: 2rem;\r\n        margin: 0;\r\n    }\r\n\r\n    h1 {\r\n        font-family: Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\r\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n        background-size: 100%;\r\n        background-clip: text;\r\n        -webkit-background-clip: text-align;\r\n        -webkik-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-text-fill-color: transparent;\r\n        filter: drop-shadow(2px 2px #0085a3);\r\n        font-size: 70px;\r\n        font-weight: 400;\r\n        text-align: center;\r\n        margin: 20px;\r\n\r\n    }\r\n\r\n    .start, .next {\r\n        cursor: pointer;\r\n        background: linear-gradient(180deg, #fff, #ffcc91);\r\n        border: 2px solid #d38558;\r\n        box-shadow: 0px 5px 10px rgba(0,0,0,0.25);\r\n        border-radius: 10px;\r\n        height: 40px;\r\n        margin: 20px 0;\r\n        padding: 0 40px;\r\n    }\r\n\r\n    .start {\r\n        max-width: 200px;\r\n    }\r\n`;","import userEvent from '@testing-library/user-event';\nimport React, { FC, MouseEvent, useState } from 'react';\nimport QuestionCard from './components/QuestionCard';\nimport { fetchQuizQuestions } from './API';\nimport { Difficulty, IQuestionState } from './API';\nimport { GlobalStyle, Wrapper } from './App.styles';\nimport { getOriginalNode } from 'typescript';\n\nexport interface IAnswerObject {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App: FC = () => {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<IQuestionState[]>([]);\n  const [number , setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<IAnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  // console.log(fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY));\n  // console.log(questions);\n\n  const startTrivia = async () => { //API call\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions (\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (e: MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if(correct) setScore(prev => prev + 1);\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  }\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n\n    if(nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>REACT QUIZ</h1>\n        { \n          gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n            <button className='start' onClick={startTrivia}>\n              Start\n            </button>\n          ) : null \n        }\n        {\n          !gameOver ? <p className='score'>score: {score}</p> : null\n        }\n        {\n          loading && <p>Loading Questions ...</p>\n        }\n        {\n          !loading && !gameOver && (\n            <QuestionCard \n              questionNr = {number + 1} \n              totalQuestions = {TOTAL_QUESTIONS}\n              question = {questions[number].question}\n              answers = {questions[number].answers}\n              userAnswer = {userAnswers ? userAnswers[number] : undefined}\n              callback = {checkAnswer}\n            />\n          )\n        }\n        {\n          !gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n            <button className='next' onClick={nextQuestion}>Next Question</button>\n          ) : null\n        }\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}